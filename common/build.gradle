apply plugin: 'org.jetbrains.kotlin.multiplatform'

repositories {
    jcenter()
}

kotlin {
    targets {
        fromPreset(getIOSPreset(), 'ios') {
            compilations.main {
                outputKinds 'FRAMEWORK'

            }
        }

        fromPreset(presets.jvm, 'jvm')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }

        jvmTest {

        }
    }
}

configurations {
    compileClasspath
}

task buildFramework {
    doLast {
        if (!isCalledFromXcode()) {
            throw new Exception("Please run 'buildFramework' task with all necessary properties!")
        }

        println("from: ${kotlin.targets.ios.compilations.main.getBinary('FRAMEWORK', getXcodeConfiguration()).parentFile}")
        println("into: ${getXcodeFrameworkLocation()}")

        File frameworkDir = kotlin.targets.ios.compilations.main.getBinary('FRAMEWORK', getXcodeConfiguration())

        copy {
            from frameworkDir.parentFile
            into getXcodeFrameworkLocation()
            include "${frameworkDir.name}/**"
            include "${frameworkDir.name}.dSYM/**"
//            rename   'main', 'Common'
        }
    }
}

//task copyFramework {
//    doLast {
//        copy {
//            from frameworkDir.parentFile
//            into getXcodeFrameworkLocation()
//            include "${frameworkDir.name}/**"
//            include "${frameworkDir.name}.dSYM/**"
//            rename   'main', 'Common'
//        }
//    }
//}
//copyFramework.mustRunAfter buildFramework

afterEvaluate {
    if (isCalledFromXcode()) {
        buildFramework.dependsOn kotlin.targets.ios.compilations.main.linkTaskName('FRAMEWORK', getXcodeConfiguration())
    }
}

private boolean isCalledFromXcode() {
    project.hasProperty('xcode.configuration') && project.hasProperty('xcode.framework.location')
}

private String getXcodeConfiguration() {
    project.properties['xcode.configuration'] as String
}

private String getXcodeFrameworkLocation() {
    project.properties['xcode.framework.location'] as String
}

private def getIOSPreset() {
    String name = project.hasProperty('xcode.prese') ? project.properties['xcode.prese'] : 'iosX64'
    project.kotlin.presets[name]
}
